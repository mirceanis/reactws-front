/**
 * Generates a {@code long} version code
 * calculated from the {@code <Major>.<Minor>.<Build>} integer components of a version name String.
 *
 * It should support versions of the form:
 * <ul>
 * <li>2.65.97                          -> 2065097 - simple style</li>
 * <li>2.65.97 SNAPSHOT                -> 2065097 - can have text after version, separated by space</li>
 * <li>2.65.97 feature/2681-bla-bla     -> 2065097 - text can be a branch name</li>
 * <li>2.65.97 746d9836a6f5ee5f         -> 2065097 - or a commit hash</li>
 * <li>2.65.97-SNAPSHOT                 -> 2065097 - text can be separated by a dash</li>
 * <li>2.657.912                        -> 2057012 - each component can have 2 figures</li>
 * <li>2.2657.1912                      -> 2057012 - component values are modulo 1000</li>
 * <li></li>
 * <li>2.6                              -> 2006000 - build number can be missing </li>
 * <li>2                                -> 2000000 - only major version </li>
 * </ul>
 *
 * @param versionName a String having one of the above forms
 */
static def computeVersionCode(String versionName) {

    String versionString = normalizeVersionString(versionName)

    def components = versionString.tokenize(".")

    //actual computation
    long versionCode = 0L;
    for (String component : components) {
        versionCode *= 1000L;
        versionCode += (Integer.valueOf(component) % 1000L);
    }

    if (versionCode == 0L) {
        //fallback to nonzero
        versionCode = 42
    }

    return versionCode
}

/**
 * Normalizes a versionName String to a {@code <Major>.<Minor>.<Build>} representation
 *
 * @param versionName a String having one of the forms described in `computeVersionCode`
 */
static def normalizeVersionString(String versionName) {
    //trim and separate by spaces or `-`
    String[] tokens = versionName.trim().tokenize('- \t');

    def components = new ArrayDeque<String>(tokens[0].tokenize("."))

    //ignore the first components if there are more than 3
    while (components.size() > 3) {
        components.poll()
    }

    //make sure there are enough components to go around
    while (components.size() < 3) {
        components.offer("0")
    }

    return components.join(".")
}

/**
 * Check repo to see if it is clean, throws an exception otherwise
 */
task checkCleanRepo() {
    group = "playstore"
    doLast {
        boolean ignoreState = false;
        if (project.hasProperty("IGNORE_REPOSITORY_STATE") && Boolean.valueOf(IGNORE_REPOSITORY_STATE)) {
            ignoreState = true;
        }

        String gitStatus = "";

        try {
            gitStatus = "git status".execute().text
        } catch (IOException ignored) {
            //git executable not found
            ignoreState = true;
        }

        if (!ignoreState && !gitStatus.contains('nothing to commit')) {
            throw new GradleException("There are some uncommited changes in your local git copy. "
                    + "Please clean your repo and try again!"
                    + "\n\nTo ignore this message, start gradle with -PIGNORE_REPOSITORY_STATE=true"
                    + " or add `IGNORE_REPOSITORY_STATE=true` to your `gradle.properties` file" )
        }
    }
}

static def getBuildVersionName() {
    def cv = System.env.CIRCLE_VERSION_NAME?.replaceAll(/\$\{CIRCLE_BUILD_NUM\}/, "${System.env.CIRCLE_BUILD_NUM}")
    def circleVersion = cv?: '0.0.42'
    return "$circleVersion"
}

static int getBuildVersionCode() {
    def code = computeVersionCode(getBuildVersionName())
    return code
}

def getBuildArtifactsDir() {
    def outDir = System.env.CIRCLE_ARTIFACTS ?: "${rootDir}/build/artifacts"
    return file(outDir)
}

///////////////apply the versions to the outside
ext {
    getBuildVersionCode = this.&getBuildVersionCode
    getBuildVersionName = this.&getBuildVersionName
    getBuildArtifactsDir = this.&getBuildArtifactsDir
}
///////////////////

/**
 * Defines a task that copies the APKs for all the flavors
 * along with their respective test-variants
 * and proguard mappings
 * to the publishing dir
 */
/////////////// publishing
task deliverArchives {
    group = "playstore"
}

android.applicationVariants.all { variant ->

    if (!variant.name.toLowerCase().contains("release")) {
        return
    }

    def taskDependencies = ["checkCleanRepo", "assemble${variant.name.capitalize()}"]
    Task androidTestTask = project.tasks.findByName("assemble${variant.name.capitalize()}AndroidTest");
    if (androidTestTask != null) {
        taskDependencies.add("${androidTestTask.getName()}")
    }

    Task deliveryTask = task(type: Copy, dependsOn: taskDependencies, "deliver${variant.name.capitalize()}") {
        group "playstore"

        //copy the proguard mapping
        if (variant.getBuildType().isMinifyEnabled()) {
            logger.debug "mapping file is ${variant.mappingFile}"

            from("${variant.mappingFile.parent}") {
                include "mapping.txt"
                rename { String oldName ->
                    def flavor = variant.flavorName?:variant.buildType.name
                    "${rootProject.name}-${getVersionName()}-${flavor}-mapping.txt"
                }
            }
        }

        //go through each output and apply a proper name
        variant.outputs.each { output ->
            from(output.outputFile) {
                exclude "*release-unaligned.apk", "*debug-unaligned.apk"
                rename { String oldName ->
                    def flavor = variant.flavorName?:variant.buildType.name
                    "${rootProject.name}-${getVersionName()}-${flavor}.apk"
                }
            }
        }

        //also copy the test-apk
        variant.testVariant?.outputs?.each {
            from(it.outputFile)
        }

        into "${getBuildArtifactsDir()}"

        doLast {
            logger.lifecycle "publishing ${rootProject.name}:${variant.name}:${getBuildVersionName()} to: ${getBuildArtifactsDir()}"
        }
    }

    //if a non-null, non-whitespace flavorName exists
    if (variant.flavorName?.trim()) {
        def flavorTaskName = "deliver${variant.flavorName.capitalize()}"
        //find or create a task named flavorTaskName
        Task deliverByFlavor = project.tasks.findByName(flavorTaskName) ?: task(flavorTaskName) {
            group = "playstore"
        }
        deliverByFlavor.dependsOn deliveryTask
    }

    deliverArchives.dependsOn deliveryTask

}